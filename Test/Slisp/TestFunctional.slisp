(import lib/unittest)

(def make-incrementer (n)
  (fn () (++ n)))
  
(def make-adder (initial)
  (let ((n initial))
    (fn (delta) (+= n delta))))
    
(def test-closures ()
  (set inc1 (make-incrementer 1))
  (set inc2 (make-incrementer 10))
  (set adder1 (make-adder 5))
  (set adder2 (make-adder 15))
  (and
    (== 2 (inc1))
    (== 3 (inc1))
    (== 11 (inc2))
    (== 12 (inc2))
    (== 4 (inc1))
    (== 6 (adder1 1))
    (== 7 (adder1 1))
    (== 17 (adder1 10))
    (== 18 (adder2 3))))

(def plusTwo (x)
  (def binaryAdd (y) (+ x y))
  (binaryAdd 2))
    
#144
(def test-subfunctions ()
  (and
    (== 7 (plusTwo 5))
    (has-error? 'binaryAdd)))
    
# this doesn't quite work yet
#(def make-person (f l)
#  (let ((firstName f)
#        (lastName l)
#        (setFirstName (fn (x) (set firstName x))))
#    (def setLastName (x) (set lastName x))
#    (fn (args)
#      (let ((firstArg (first args))
#            (restArgs (rest args))
#            (member (unquote firstArg)))
#        (cond
#          ((fn? member) (apply member restArgs))
#          (true member))))))
